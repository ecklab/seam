WARNING: unknown option '-vanilla'


R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load packages and seam functions
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.7     ✔ dplyr   1.0.8
✔ tidyr   1.2.0     ✔ stringr 1.4.0
✔ readr   2.1.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(parallel)
> devtools::load_all()
ℹ Loading seam
> setwd("../")
> 
> # load data
> bip = readRDS("data/bip.Rds")
> b_lu = as.data.frame(readRDS("data/b-lu.Rds")) # why does this break as a tibble....??
> p_lu = as.data.frame(readRDS("data/p-lu.Rds")) # why does this break as a tibble....??
> 
> # modify pools for validation
> batter_pool  = get_batter_pool(bip = bip, year_start = 2017, year_end = 2020)
> pitcher_pool = get_pitcher_pool(bip = bip, year_start = 2017, year_end = 2020)
> 
> trn = bip %>%
+   filter(game_year <= 2020)
> 
> matchups = bip %>%
+   filter(game_year == 2021) %>%
+   group_by(batter, pitcher) %>%
+   summarise(n = n()) %>%
+   filter(n >= 10) %>%
+   select(-n) %>%
+   filter(batter != 628451) %>% # only 2021 bip (cannot fit to trn)
+   filter(batter != 677551) %>% # only 2021 bip (cannot fit to trn)
+   filter(pitcher != 657093)    # only 2021 bip (cannot fit to trn)
`summarise()` has grouped output by 'batter'. You can override using the
`.groups` argument.
> 
> get_top_n_coverage = function(n) {
+ 
+   print(n)
+ 
+   results = matrix(data = 0, nrow = nrow(matchups), ncol = 3)
+ 
+   for (i in 1:nrow(matchups)) {
+ 
+     est = do_full_seam_matchup(
+       .batter = matchups[i, ]$batter,
+       .pitcher = matchups[i, ]$pitcher,
+       .bip = trn,
+       .batter_pool = batter_pool,
+       .pitcher_pool = pitcher_pool,
+       .ratio_batter = .85,
+       .ratio_pitcher = .85
+     )
+ 
+     tst = bip %>%
+       filter(game_year > 2020) %>%
+       filter(batter == matchups[i,]$batter) %>%
+       filter(pitcher == matchups[i,]$pitcher)
+ 
+     in_top = matrix(NA, nrow = nrow(tst), ncol = 3)
+ 
+     for (j in 1:nrow(tst)) {
+ 
+       in_top[j, ] = c(
+         check_in_top_n(
+           n = n,
+           pitch = tst[j, c("x", "y")],
+           synthetic = est$seam_df,
+           plot = FALSE
+         ),
+         check_in_top_n(
+           n = n,
+           pitch = tst[j, c("x", "y")],
+           synthetic = est$empirical_pitcher_df,
+           plot = FALSE
+         ),
+         check_in_top_n(
+           n = n,
+           pitch = tst[j, c("x", "y")],
+           synthetic = est$empirical_batter_df,
+           plot = FALSE
+         )
+       )
+ 
+       # print(in_top[j, ])
+ 
+     }
+ 
+     results[i, ] = colMeans(in_top)
+ 
+   }
+ 
+   colnames(results) = c("seam", "batter", "pitcher")
+   return(results)
+ 
+ }
> 
> 
> 
> # 2.33 * diff(asdf$seam_df$x[1:2]) * 2.33 * diff(unique(asdf$seam_df$y)[1:2]) * 3000
> # 115000 * c(0.50, 0.80)
> # 92000 / (2.33 * diff(asdf$seam_df$x[1:2]) * 2.33 * diff(unique(asdf$seam_df$y)[1:2]))
> # 57500 / (2.33 * diff(asdf$seam_df$x[1:2]) * 2.33 * diff(unique(asdf$seam_df$y)[1:2]))
> # 8 - 10 x points
> # seq(from = 1500, to = 2500, length.out = 10)
> 
> # results for "all n"
> # graph_points = c(250, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000)
> graph_points = seq(from = 1500, to = 2500, by = 50)
> results_many_n = mclapply(graph_points, get_top_n_coverage, mc.cores = 11)
[1] 1500
[1] 1550
[1] 1600
[1] 1650
[1] 1700
[1] 1750
[1] 1800
[1] 1850
[1] 1900
[1] 1950
[1] 2000
[1] 2450
[1] 2050
[1] 2500
[1] 2250
[1] 2400
[1] 2200
[1] 2100
[1] 2350
[1] 2300
[1] 2150
> 
> # save results for many n as a list
> saveRDS(results_many_n, file = "validation/conditional-top-n-cov-n.Rds")
> 
> # results for some n
> res_tnc_1000 = get_top_n_coverage(n = 1000) # 10%
[1] 1000
> res_tnc_2000 = get_top_n_coverage(n = 2000) # 20%
[1] 2000
> res_tnc_3000 = get_top_n_coverage(n = 3000) # 30%
[1] 3000
> 
> saveRDS(res_tnc_1000, file = "validation/conditional-top-n-cov-1000.Rds")
> saveRDS(res_tnc_2000, file = "validation/conditional-top-n-cov-2000.Rds")
> saveRDS(res_tnc_3000, file = "validation/conditional-top-n-cov-3000.Rds")
> 
> proc.time()
     user    system   elapsed 
18576.207  1216.677  2849.715 
